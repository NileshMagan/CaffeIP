// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ==============================================================

#ifndef XNEURAL_NET_H
#define XNEURAL_NET_H

#ifdef __cplusplus
extern "C" {
#endif

/***************************** Include Files *********************************/
#ifndef __linux__
#include "xil_types.h"
#include "xil_assert.h"
#include "xstatus.h"
#include "xil_io.h"
#else
#include <stdint.h>
#include <assert.h>
#include <dirent.h>
#include <fcntl.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sys/mman.h>
#include <unistd.h>
#include <stddef.h>
#endif
#include "xneural_net_hw.h"

/**************************** Type Definitions ******************************/
#ifdef __linux__
typedef uint8_t u8;
typedef uint16_t u16;
typedef uint32_t u32;
#else
typedef struct {
    u16 DeviceId;
    u32 Hls_macc_periph_bus_BaseAddress;
} XNeural_net_Config;
#endif

typedef struct {
    u32 Hls_macc_periph_bus_BaseAddress;
    u32 IsReady;
} XNeural_net;

/***************** Macros (Inline Functions) Definitions *********************/
#ifndef __linux__
#define XNeural_net_WriteReg(BaseAddress, RegOffset, Data) \
    Xil_Out32((BaseAddress) + (RegOffset), (u32)(Data))
#define XNeural_net_ReadReg(BaseAddress, RegOffset) \
    Xil_In32((BaseAddress) + (RegOffset))
#else
#define XNeural_net_WriteReg(BaseAddress, RegOffset, Data) \
    *(volatile u32*)((BaseAddress) + (RegOffset)) = (u32)(Data)
#define XNeural_net_ReadReg(BaseAddress, RegOffset) \
    *(volatile u32*)((BaseAddress) + (RegOffset))

#define Xil_AssertVoid(expr)    assert(expr)
#define Xil_AssertNonvoid(expr) assert(expr)

#define XST_SUCCESS             0
#define XST_DEVICE_NOT_FOUND    2
#define XST_OPEN_DEVICE_FAILED  3
#define XIL_COMPONENT_IS_READY  1
#endif

/************************** Function Prototypes *****************************/
#ifndef __linux__
int XNeural_net_Initialize(XNeural_net *InstancePtr, u16 DeviceId);
XNeural_net_Config* XNeural_net_LookupConfig(u16 DeviceId);
int XNeural_net_CfgInitialize(XNeural_net *InstancePtr, XNeural_net_Config *ConfigPtr);
#else
int XNeural_net_Initialize(XNeural_net *InstancePtr, const char* InstanceName);
int XNeural_net_Release(XNeural_net *InstancePtr);
#endif

void XNeural_net_Start(XNeural_net *InstancePtr);
u32 XNeural_net_IsDone(XNeural_net *InstancePtr);
u32 XNeural_net_IsIdle(XNeural_net *InstancePtr);
u32 XNeural_net_IsReady(XNeural_net *InstancePtr);
void XNeural_net_EnableAutoRestart(XNeural_net *InstancePtr);
void XNeural_net_DisableAutoRestart(XNeural_net *InstancePtr);

u32 XNeural_net_Get_result(XNeural_net *InstancePtr);
u32 XNeural_net_Get_result_vld(XNeural_net *InstancePtr);
u32 XNeural_net_Get_mean_image_BaseAddress(XNeural_net *InstancePtr);
u32 XNeural_net_Get_mean_image_HighAddress(XNeural_net *InstancePtr);
u32 XNeural_net_Get_mean_image_TotalBytes(XNeural_net *InstancePtr);
u32 XNeural_net_Get_mean_image_BitWidth(XNeural_net *InstancePtr);
u32 XNeural_net_Get_mean_image_Depth(XNeural_net *InstancePtr);
u32 XNeural_net_Write_mean_image_Words(XNeural_net *InstancePtr, int offset, int *data, int length);
u32 XNeural_net_Read_mean_image_Words(XNeural_net *InstancePtr, int offset, int *data, int length);
u32 XNeural_net_Write_mean_image_Bytes(XNeural_net *InstancePtr, int offset, char *data, int length);
u32 XNeural_net_Read_mean_image_Bytes(XNeural_net *InstancePtr, int offset, char *data, int length);
u32 XNeural_net_Get_input_image_BaseAddress(XNeural_net *InstancePtr);
u32 XNeural_net_Get_input_image_HighAddress(XNeural_net *InstancePtr);
u32 XNeural_net_Get_input_image_TotalBytes(XNeural_net *InstancePtr);
u32 XNeural_net_Get_input_image_BitWidth(XNeural_net *InstancePtr);
u32 XNeural_net_Get_input_image_Depth(XNeural_net *InstancePtr);
u32 XNeural_net_Write_input_image_Words(XNeural_net *InstancePtr, int offset, int *data, int length);
u32 XNeural_net_Read_input_image_Words(XNeural_net *InstancePtr, int offset, int *data, int length);
u32 XNeural_net_Write_input_image_Bytes(XNeural_net *InstancePtr, int offset, char *data, int length);
u32 XNeural_net_Read_input_image_Bytes(XNeural_net *InstancePtr, int offset, char *data, int length);

void XNeural_net_InterruptGlobalEnable(XNeural_net *InstancePtr);
void XNeural_net_InterruptGlobalDisable(XNeural_net *InstancePtr);
void XNeural_net_InterruptEnable(XNeural_net *InstancePtr, u32 Mask);
void XNeural_net_InterruptDisable(XNeural_net *InstancePtr, u32 Mask);
void XNeural_net_InterruptClear(XNeural_net *InstancePtr, u32 Mask);
u32 XNeural_net_InterruptGetEnabled(XNeural_net *InstancePtr);
u32 XNeural_net_InterruptGetStatus(XNeural_net *InstancePtr);

#ifdef __cplusplus
}
#endif

#endif
